public class Stack<T> implements StackInterface<T>
{
    // Linked node fields
    private DoubleLinkedNode<T> head, tail, curr;
    private int size;

    //default constructor creates head and tail nodes
    Stack()
    {
        tail = new DoubleLinkedNode(0, null, head);
        head = new DoubleLinkedNode(0, tail, null);
        size = 0;
    }

    //clears the stack
    @Override
    public void clear()
    {
        head.setNext(tail);
        head.setPrev(null);
        curr = head;
        size = 0;
    }

    //will push no matter the size: removing the first element 
    @Override
    public boolean push(T data)
    {
        if (head.getNext() != tail)
        {
            //creating a new node
            DoubleLinkedNode<T> tempNode = new DoubleLinkedNode(data, tail, curr);
            tail.setPrev(tempNode); 
            curr.setNext(tempNode);
            curr = tempNode;        
            size++;
   
        } //edge case for the first ekement pushed
        else
        {
            DoubleLinkedNode<T> tempNode = new DoubleLinkedNode(data, tail, curr);
            head.setNext(tempNode);
            tail.setPrev(tempNode);
            curr = tempNode;
        }
        return true;
    }

    //  removes the top element if the size is > 0
    @Override
    public void pop()
    {
        if (size > 0)
        {
            tail.setPrev(curr.getPrev());
            curr = curr.getPrev();
            curr.setNext(tail);
            size--;
        } else {
            tail.setPrev(head);
            size = 0;
        }
    }

    // Looks at the top element 
    @Override
    public T peek()
    {
        if (size >= 0)
        {
            return curr.getElement();
        } else
        {
            return null;
        }
    }

    // returns the size of the stack (rewritten 
    @Override
    public int size()
    {
        DoubleLinkedNode<T> sent;
        sent = head;
        return sizeHelper(sent);
    }

    //recursive counter
    private int sizeHelper(DoubleLinkedNode sent)
    {
        if (sent.getNext() == tail) return 0;
        return 1 + sizeHelper(sent.getNext());
    }
    
    //prints the stack visualy as I would see it for testing purposes
    public void print(){
        DoubleLinkedNode<T> temp;
        temp = tail.getPrev();
        //System.out.print("{ ");
        for (int i = 0; i < size(); i++)
        {
            System.out.println(temp.getElement() + " ");
            temp = temp.getPrev();
        }
        //System.out.println("}");
    }
}
